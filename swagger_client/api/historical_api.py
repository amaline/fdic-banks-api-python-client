# coding: utf-8

"""
    FDIC Bank Data API (Beta)

    API to serve banking industry data to the public.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: PublicDataFeedback@fdic.gov
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class HistoricalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_historical(self, **kwargs):  # noqa: E501
        """Get Historical Aggregate Data by Year  # noqa: E501

        Returns aggregate financial and structure data, subtotaled by year, regarding finanical institutions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historical(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filters: The filter criteria that refines the records included in the calculated result. example: >- STNAME:\"Alabama\" AND YEAR:2005 Examples: * Filter by Community Banks (CB) vs. Savings Institutions (SI)   `CB_SI:CB`   * Filter by State name   `STNAME:\"Virginia\"`     * Filter for any one of multiple State names   `STNAME:(\"West Virginia\",\"Delaware\")`     * Filter data by the year range   `YEAR:[\"2015\" TO \"2017\"]` 
        :param str fields: Comma delimited list of fields with aggregated annual financial data to return.
        :param str sort_by: Field name by which to sort returned data
        :param str sort_order: Indicator if ascending (ASC) or descending (DESC)
        :param int limit: The number of records to return. Default is 10 and maximum is 10,000.
        :param int offset: The offset of page to return.
        :param str agg_by: The field(s) by which data will be aggregated. Valid values are 'YEAR' or 'YEAR,STNAME'.
        :param str agg_term_fields: The field(s) for which aggregations will be counted for each unique term.
        :param str agg_sum_fields: The field(s) for which aggregations will be summed or aggregated.
        :param int agg_limit: The limit on how many aggregated results will be displayed
        :param str format: The format of the data to return.
        :param str download: Whether the data should be downloaded as a file.
        :param str filename: The filename to use when downloading data.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_historical_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_historical_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_historical_with_http_info(self, **kwargs):  # noqa: E501
        """Get Historical Aggregate Data by Year  # noqa: E501

        Returns aggregate financial and structure data, subtotaled by year, regarding finanical institutions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_historical_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filters: The filter criteria that refines the records included in the calculated result. example: >- STNAME:\"Alabama\" AND YEAR:2005 Examples: * Filter by Community Banks (CB) vs. Savings Institutions (SI)   `CB_SI:CB`   * Filter by State name   `STNAME:\"Virginia\"`     * Filter for any one of multiple State names   `STNAME:(\"West Virginia\",\"Delaware\")`     * Filter data by the year range   `YEAR:[\"2015\" TO \"2017\"]` 
        :param str fields: Comma delimited list of fields with aggregated annual financial data to return.
        :param str sort_by: Field name by which to sort returned data
        :param str sort_order: Indicator if ascending (ASC) or descending (DESC)
        :param int limit: The number of records to return. Default is 10 and maximum is 10,000.
        :param int offset: The offset of page to return.
        :param str agg_by: The field(s) by which data will be aggregated. Valid values are 'YEAR' or 'YEAR,STNAME'.
        :param str agg_term_fields: The field(s) for which aggregations will be counted for each unique term.
        :param str agg_sum_fields: The field(s) for which aggregations will be summed or aggregated.
        :param int agg_limit: The limit on how many aggregated results will be displayed
        :param str format: The format of the data to return.
        :param str download: Whether the data should be downloaded as a file.
        :param str filename: The filename to use when downloading data.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters', 'fields', 'sort_by', 'sort_order', 'limit', 'offset', 'agg_by', 'agg_term_fields', 'agg_sum_fields', 'agg_limit', 'format', 'download', 'filename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_historical" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'agg_by' in params:
            query_params.append(('agg_by', params['agg_by']))  # noqa: E501
        if 'agg_term_fields' in params:
            query_params.append(('agg_term_fields', params['agg_term_fields']))  # noqa: E501
        if 'agg_sum_fields' in params:
            query_params.append(('agg_sum_fields', params['agg_sum_fields']))  # noqa: E501
        if 'agg_limit' in params:
            query_params.append(('agg_limit', params['agg_limit']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'download' in params:
            query_params.append(('download', params['download']))  # noqa: E501
        if 'filename' in params:
            query_params.append(('filename', params['filename']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
